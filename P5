#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

// Функция для аппроксимации линейной функции F1: f(x) = a1*x + a0
void fitLinearFunction(const std::vector<double>& x, const std::vector<double>& y, double& a0, double& a1) {
    double sumX = 0.0, sumY = 0.0, sumXY = 0.0, sumXX = 0.0;

    // Вычисление сумм и произведений значений x и y
    for (size_t i = 0; i < x.size(); ++i) {
        sumX += x[i];
        sumY += y[i];
        sumXY += x[i] * y[i];
        sumXX += x[i] * x[i];
    }

    // Вычисление параметров аппроксимирующей функции
    double denominator = x.size() * sumXX - sumX * sumX;
    a1 = (x.size() * sumXY - sumX * sumY) / denominator;
    a0 = (sumY - a1 * sumX) / x.size();
}

// Функция для аппроксимации квадратичной функции F2: f(x) = a2*x^2 + a1*x + a0
void fitQuadraticFunction(const std::vector<double>& x, const std::vector<double>& y, double& a0, double& a1, double& a2) {
    double sumX = 0.0, sumY = 0.0, sumXX = 0.0, sumXY = 0.0, sumXXX = 0.0, sumXXXX = 0.0, sumXXY = 0.0;

    // Вычисление сумм и произведений значений x и y
    for (size_t i = 0; i < x.size(); ++i) {
        double xx = x[i] * x[i];
        sumX += x[i];
        sumY += y[i];
        sumXX += xx;
        sumXY += x[i] * y[i];
        sumXXX += xx * x[i];
        sumXXXX += xx * xx;
        sumXXY += xx * y[i];
    }

    // Вычисление параметров аппроксимирующей функции
    double denominator = x.size() * sumXXXX * sumXX - sumXX * sumXX * sumXX - 2 * sumX * sumXXX * sumXX + 2 * sumX * sumXX * sumXXX + sumX * sumX * sumXX * sumXX - sumX * sumX * sumXXX * sumX;
    a2 = (sumXY * sumXXXX * sumXX - sumXXY * sumXX * sumXX - sumXX * sumXY * sumXXX + sumXX * sumXXY * sumXX + sumXX * sumXX * sumXXY - sumX * sumXXX * sumXY) / denominator;
    a1 = (-sumXXY * sumXXXX + sumXX * sumXXY * sumXX - sumXY * sumXX * sumXX + sumXX * sumXXX * sumX + sumX * sumXXX * sumXY - sumX * sumXX * sumXXY) / denominator;
    a0 = (-sumXXX * sumXXY * sumXX + sumX * sumXX * sumXXY * sumX + sumXX * sumXY * sumXXX - sumXX * sumXX * sumXXY * sumX - sumXX * sumXXX * sumXY + sumXX * sumXX * sumXXY) / denominator;
}

int main() {
    // Открытие файла с данными
    std::ifstream inputFile("input.dat");
    if (!inputFile.is_open()) {
        std::cerr << "Error: Could not open input file." << std::endl;
        return 1;
    }

    // Считывание данных из файла
    std::vector<double> x_values;
    std::vector<double> y_values;
    double x, y;
    while (inputFile >> x >> y) {
        x_values.push_back(x);
        y_values.push_back(y);
    }
    inputFile.close();

    // Вычисление параметров для линейной функции F1
    double a0_linear, a1_linear;
    fitLinearFunction(x_values, y_values, a0_linear, a1_linear);
    std::cout << "Linear Function (F1): a0 = " << a0_linear << ", a1 = " << a1_linear << std::endl;

    // Вычисление параметров для квадратичной функции F2
    double a0_quadratic, a1_quadratic, a2_quadratic;
    fitQuadraticFunction(x_values, y_values, a0_quadratic, a1_quadratic, a2_quadratic);
    std::cout << "Quadratic Function (F2): a0 = " << a0_quadratic << ", a1 = " << a1_quadratic << ", a2 = " << a2_quadratic << std::endl;

    return 0;
}
