#include <iostream>
#include <cmath>

// Функция, для которой вычисляем интеграл
double f(double x) {
    return std::cos(x) * std::cos(x);
}

// Метод левых прямоугольников
double leftRectangleMethod(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = 0.0;
    for (int i = 0; i < n; i++) {
        double x = a + i * h;
        sum += f(x);
    }
    return h * sum;
}

// Метод Ньютона-Симпсона (квадратура)
double simpsonMethod(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = f(a) + f(b);
    for (int i = 1; i < n; i += 2) {
        double x = a + i * h;
        sum += 4 * f(x);
    }
    for (int i = 2; i < n - 1; i += 2) {
        double x = a + i * h;
        sum += 2 * f(x);
    }
    return (h / 3) * sum;
}

int main() {
    double a, b, x;
    std::cout << "Введите значения a и b (интервал интегрирования): ";
    std::cin >> a >> b;
    std::cout << "Введите значение x: ";
    std::cin >> x;

    // Вычисление интеграла методом левых прямоугольников
    int n = 1000; // количество разбиений
    double leftRectangleResult = leftRectangleMethod(a, b, n);

    // Вычисление интеграла методом Ньютона-Симпсона
    int m = 100; // количество разбиений
    double simpsonResult = simpsonMethod(a, b, m);

    std::cout << "Приближенное значение интеграла (метод левых прямоугольников): " << leftRectangleResult << std::endl;
    std::cout << "Приближенное значение интеграла (метод Ньютона-Симпсона): " << simpsonResult << std::endl;

    return 0;
}
